#!/usr/bin/python3

import os
import sys
import webbrowser
import argparse
from collections import defaultdict
import requests
import gi
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, Gdk

ISSUE_URL = "https://github.com/canonical/steam-snap/issues/new?assignees=&labels=bug&projects=&template=bug_report.yml"
DISCUSSION_URL = "https://github.com/canonical/steam-snap/discussions/new?category=game-reports"
WIKI_URL = "https://github.com/canonical/steam-snap/wiki/Troubleshooting#submitting-a-steam-report"
GRAPHQL_URL = "https://api.github.com/graphql"
TOKEN_URL = "https://github.com/settings/tokens/new"

DISCUSSION_CATEGORY_ID = "DIC_kwDOC5Gtms4CR-_9"

BODY_SUFFIX = "<!--Copy error logs from Steam/the game itself below-->"
SNAP_COMMAND = """snap connect steam:hardware-observe
snap connect steam:system-observe"""

data = {}

class SteamReportWindow(Gtk.Window):
    def __init__(self, args):
        super().__init__()
        self.set_resizable(True)
        self.set_border_width(10)
        self.set_position(Gtk.WindowPosition.CENTER)
        self.set_default_size(-1, 450)

        grid = Gtk.Grid(
            row_spacing=10,
            column_spacing=10,
            column_homogeneous=True,
        )
        self.add(grid)

        label = Gtk.Label(halign=Gtk.Align.START)
        label.set_markup(
            "Below is the hardware information collected from your system."
            f"\nSee <a href='{WIKI_URL}'>{WIKI_URL}</a> for more information."
        )
        grid.attach(label, 0, 0, 5, 1)

        copy_button = Gtk.Button.new_from_icon_name("edit-copy-symbolic", Gtk.IconSize.MENU)
        copy_button.set_tooltip_text("Copy")
        copy_button.connect("clicked", lambda x: self.button_copy())
        copy_button.set_halign(Gtk.Align.END)
        grid.attach_next_to(copy_button, label, Gtk.PositionType.RIGHT, 1, 1)

        scrolled_window = Gtk.ScrolledWindow()
        scrolled_window.set_vexpand(True)
        textview = Gtk.TextView(
            editable=False,
            monospace=True,
            top_margin=5,
            bottom_margin=5,
            right_margin=10,
            left_margin=10
        )
        textview.get_buffer().set_text(dict_to_string(gather_data(args)).strip())
        scrolled_window.add(textview)
        grid.attach(scrolled_window, 0, 2, 6, 1)

        issue_button = Gtk.Button(
            label="Open New Issue",
            tooltip_text="Opens a new Steam Snap issue to report a bug or problem"
        )
        issue_button.connect("clicked", lambda x: self.button_issue())
        grid.attach_next_to(issue_button, scrolled_window, Gtk.PositionType.BOTTOM, 2, 1)

        report_button = Gtk.Button(
            label="Open New Game Report",
            tooltip_text="Opens a new Steam Snap discussion to report the functionality of a specific game"
        )
        report_button.connect("clicked", lambda x: self.button_report())
        grid.attach_next_to(report_button, issue_button, Gtk.PositionType.RIGHT, 2, 1)

        ok_button = Gtk.Button(label="Ok")
        ok_button.connect("clicked", lambda x: self.close())
        grid.attach_next_to(ok_button, report_button, Gtk.PositionType.RIGHT, 2, 1)


    def button_copy(self):
        clipboard = Gtk.Clipboard.get(Gdk.SELECTION_CLIPBOARD)
        clipboard.set_text(dict_to_string(data), -1)


    def button_issue(self):
        open_issue(data)


    def button_report(self):
        open_discussion(data)


class NeedPlugsWindow(Gtk.Window):
    def __init__(self, args):
        super().__init__()
        self.set_resizable(False)
        self.set_border_width(10)
        self.set_position(Gtk.WindowPosition.CENTER)

        grid = Gtk.Grid(
            row_spacing=10,
            column_spacing=10,
            column_homogeneous=True
        )
        self.add(grid)

        title_label = Gtk.Label()
        title_label.set_markup(
            "<b>Unable to collect hardware information due to missing plugs.</b>"
        )
        grid.attach(title_label, 0, 0, 4, 1)

        prompt_label = Gtk.Label(margin_top=20)
        prompt_label.set_markup(
            "Run the following commands in a terminal to connect the missing plugs:"
        )
        grid.attach_next_to(prompt_label, title_label, Gtk.PositionType.BOTTOM, 3, 1)

        copy_button = Gtk.Button.new_from_icon_name("edit-copy-symbolic", Gtk.IconSize.MENU)
        copy_button.set_margin_top(20)
        copy_button.set_tooltip_text("Copy")
        copy_button.connect("clicked", lambda x: self.button_copy())
        copy_button.set_halign(Gtk.Align.END)
        grid.attach_next_to(copy_button, prompt_label, Gtk.PositionType.RIGHT, 1, 1)

        textview = Gtk.TextView(
            editable=False,
            monospace=True,
            top_margin=5,
            bottom_margin=5,
            right_margin=10,
            left_margin=10
        )
        textview.get_buffer().set_text(SNAP_COMMAND)
        grid.attach_next_to(textview, prompt_label, Gtk.PositionType.BOTTOM, 4, 1)

        retry_button = Gtk.Button(label="Retry")
        retry_button.connect("clicked", lambda x: self.button_retry(args))
        grid.attach(retry_button, 2, 3, 1, 1)

        ok_button = Gtk.Button(label="Ok")
        ok_button.connect("clicked", lambda x: self.close())
        grid.attach_next_to(ok_button, retry_button, Gtk.PositionType.RIGHT, 1, 1)


    def button_copy(self):
        clipboard = Gtk.Clipboard.get(Gdk.SELECTION_CLIPBOARD)
        clipboard.set_text(SNAP_COMMAND, - 1)


    def button_retry(self, args):
        self.close()
        create_window(args)


def summary():
    """Summarize discussion data based on labels"""

    if "GITHUB_ACCESS_TOKEN" not in os.environ:
        print("Please set the environment variable GITHUB_ACCESS_TOKEN to a valid token")
        print(f"Generate a token here: {TOKEN_URL}")
        return

    print("Gathering most recent 100 reports...")

    PDB_RATINGS = [
        "pdb-borked",
        "pdb-bronze",
        "pdb-silver",
        "pdb-gold",
        "pdb-platinum",
        "pdb-native",
    ]
    RATINGS = [
        "borked",
        "bronze",
        "silver",
        "gold",
        "platinum",
        "",
    ]

    access_token = os.environ["GITHUB_ACCESS_TOKEN"]
    headers = {
        "Authorization": f"token {access_token}",
        "Content-Type": "application/json"
    }
    response = requests.post(GRAPHQL_URL, headers=headers, json={"query":"""
        query {
            repository(owner: "canonical", name: "steam-snap") {
                discussions(first: 100, categoryId: "%s") {
                    nodes {
                        title
                        labels(first: 10) {
                            nodes {
                                name
                            }
                        }
                    }
                }
            }
        }
    """ % (DISCUSSION_CATEGORY_ID)})
    discussions = response.json()["data"]["repository"]["discussions"]

    total_count = 0
    counts = {rating: 0 for rating in RATINGS if rating}
    comparisons = {
        "worse": 0,
        "expected": 0,
        "better": 0
    }

    for discussion in discussions["nodes"]:
        labels = discussion["labels"]["nodes"]
        rating = len(RATINGS) - 1
        pdb_rating = len(PDB_RATINGS) - 1
        valid = False

        for label in labels:
            if label["name"] in counts:
                counts[label["name"]] += 1
                valid = True
                total_count += 1
            if label["name"] in RATINGS:
                rating = min(rating, RATINGS.index(label["name"]))
            if label["name"] in PDB_RATINGS:
                pdb_rating = min(pdb_rating, PDB_RATINGS.index(label["name"]))

        if valid:
            if rating > pdb_rating:
                comparisons["better"] += 1
            elif rating < pdb_rating:
                comparisons["worse"] += 1
            else:
                comparisons["expected"] += 1

    print(f"Valid reports: {total_count}\n")

    print("Grade Counts")
    print("------------")
    print(f"{'Grade':<12} {'Count':<6} {'Percent'}")
    for count in counts.items():
        perc = round(count[1] * 100 / total_count, 2)
        print(f"{count[0].title():<12} {count[1]:<6} {perc:>5} %")
    print()

    print("Comparisons to ProtonDB")
    print("-----------------------")
    print(f"{'Performance':<12} {'Count':<6} {'Percent':<8}")
    for comparison in comparisons.items():
        perc = round(comparison[1] * 100 / total_count, 2)
        print(f"{comparison[0].title():<12} {comparison[1]:<6} {perc:>5} %")


def default():
    return "ERROR"


def dict_to_string(d, n = 0):
    """Convert a dict to yaml-like string."""

    s = ""
    for key in d:
        line = f"{'    ' * n}{key}:"
        if type(d[key]) is dict:
            line += f"\n{dict_to_string(d[key], n + 1)}"
        else:
            line += f"{' ' * (24 - len(line))}{d[key]}\n"
        s += line
    return s


def plugs_connected():

    return os.environ.get("SNAP") != None\
        and not bool(os.system("snapctl is-connected system-observe"))\
        and not bool(os.system("snapctl is-connected hardware-observe"))


def gather_data(args):
    """Gathers system information, returning a data object."""

    global data
    data = {}
    # /etc/os-release
    os_release = defaultdict(default)
    os_release_lookup = [
        "/var/lib/snapd/hostfs/etc/os-release", # system-observe host os-release
        "/etc/os-release",                      # usual system os-release
    ]

    for path in os_release_lookup:
        try:
            with open(path, "r") as reader:
                for line in reader:
                    line = line.strip()
                    if (not line): continue

                    key, val = line.split("=", 1)
                    os_release[key] = val
            break
        except FileNotFoundError:
            continue

    if args.verbose:
        data["os_release"] = dict(os_release)
    else:
        data["os_release"] = {
            "name": os_release["NAME"],
            "version": os_release["VERSION"]
        }

    # snap info
    data["snap_info"] = {
        "steam_revision": os.environ.get("SNAP_REVISION"),
        "snapd_revision": os.popen("readlink /snap/snapd/current").read().strip()
    }

    # lspci
    lspci = defaultdict(default)
    for line in os.popen("lspci | grep -E 'VGA|3D controller'").read().split("\n"):
        line = line.strip()
        if not line: continue
        key, val = line.split(" ", 1)
        val = val.strip()\
            .removeprefix("VGA compatible controller: ")\
            .removeprefix("3D controller: ")
        lspci[key.strip()] = val

    data["lspci"] = dict(lspci)

    # glxinfo -B
    glxinfo = defaultdict(default)
    for line in os.popen("glxinfo -B").read().split("\n"):
        line = line.strip()
        if not line: continue
        key, val = line.split(":", 1)
        glxinfo[key.strip()] = val.strip()

    if args.verbose:
        data["glxinfo"] = dict(glxinfo)
    else:
        data["glxinfo"] = {
            "gpu": glxinfo["OpenGL renderer string"],
            "gpu_version": glxinfo["OpenGL core profile version string"]
        }

    # lscpu
    lscpu = defaultdict(default)
    for line in os.popen("lscpu").read().split("\n"):
        line = line.strip()
        if (not line): continue
        key, val = line.split(":", 1)
        lscpu[key.strip()] = val.strip()

    if args.verbose:
        data["lscpu"] = dict(lscpu)
    else:
        data["lscpu"] = {
            "model_name": lscpu["Model name"]
        }

    # XDG_DESKTOP_SESSION & DESKTOP_SESSION
    data["xdg_current_desktop"] = os.environ.get("XDG_CURRENT_DESKTOP")
    data["desktop_session"] = os.environ.get("DESKTOP_SESSION")

    return data


def open_discussion(data):
    """Open web-browser and fill in system information."""

    url = DISCUSSION_URL
    url += f"&title=Report: GAME_TITLE"
    url += f"&body=```\n{dict_to_string(data)}```\n".replace("\n", "%0A")
    url += BODY_SUFFIX
    print("Opening new discussion in web-browser...")
    webbrowser.open_new_tab(url)


def open_issue(data):
    """Open web-browser and fill in system information."""

    url = ISSUE_URL
    url += f"&environment={dict_to_string(data)}".replace("\n", "%0A")
    print("Opening new issue in web-browser...")
    webbrowser.open_new_tab(url)


def create_window(args):
    window: Gtk.Window = None
    if plugs_connected() or args.force:
        window = SteamReportWindow(args)
    else:
        window = NeedPlugsWindow(args)
    window.connect("destroy", Gtk.main_quit)
    window.show_all()
    Gtk.main()


def main():
    # Parse commandline arguments
    parser = argparse.ArgumentParser(
        description=f"Visit {WIKI_URL} for more information."
    )
    parser.add_argument(
        "--no-submit", "-n",
        help="Do not open web browser to a new discussion post.",
        const=True,
        action="store_const"
    )
    parser.add_argument(
        "--verbose", "-v",
        help="Include entire output from data collection.",
        const=True,
        action="store_const"
    )
    parser.add_argument(
        "--force", "-f",
        help="Skip environment checks and run anyway.",
        const=True,
        action="store_const"
    )
    parser.add_argument(
        "--summary", "-s",
        help="Display summary of discussion posts. Requires a GitHub key defined in GITHUB_ACCESS_TOKEN.",
        const=True,
        action="store_const"
    )
    parser.add_argument(
        "--cli", "-c",
        help="Use the classic CLI-based tool instead of the new GTK-based one.",
        const=True,
        action="store_const"
    )
    args = parser.parse_args()

    if args.summary:
        summary()
        sys.exit()

    # Test environment
    if not args.force and args.cli:
        if not plugs_connected():
            sys.exit(
                "This program relies on the system-observe and hardware-observe Snap plugs."
                "\nOutside of the Snap, run the following commands to connect them:"
                "\nsnap connect steam:system-observe"
                "\nsnap connect steam:hardware-observe"
            )

    # Gather and submit data
    if args.cli:
        data = gather_data(args)
        print(dict_to_string(data))
        if not args.no_submit:
            open_discussion(data)
    else:
        create_window(args)


if __name__ == "__main__":
    main()
